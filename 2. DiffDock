#Use OpenMM to assign hydrogen ions to the PDB files 
#I would recommend starting with either AMBER ff14SB (with OPC or TIP3P water) or CHARMM36 (with the CHARMM-modified TIP3P water)
#TIP3P and OPC Are water models
#HLA-A2 and CAR Receptors are Folded Proteins
#Generate grid poses
#If you know that the binding site on HLA-A2 involves residues 62, 63, 66, 67, 70, 74, 95, 97, 99, and 114, you can provide this information to DiffDock as a list:

#might not need this
#binding_site_residues =
#Try Tyr5, Glu63, Lys66, Tyr84, Trp147, and Tyr159
#or
#Tyr5, Tyr9, Glu63, Tyr159, Glu63, Val67, Lys66, and Tyr99, Asp77, Trp147, Ala150, Tyr116, Lys66, Arg97, Thr143, Tyr84, Thr143,Trp147
______________________________________________________
______________________________________________________

#Download CHARMM36 Charge RTFs here

#curl -o custom_filename.rtf https://url.com

  curl -o charmm36.rtf https://www.charmm-gui.org/?doc=open_toppar&filename=top_all36_prot.rtf
  
  curl -o charmm36.prm https://www.charmm-gui.org/?doc=open_toppar&filename=par_all36_prot.prm
  
  curl -o toppar_water_ions.str https://www.charmm-gui.org/?doc=open_toppar&filename=toppar_water_ions.str
  
  curl -o toppar_ions_won.str https://www.charmm-gui.org/?doc=open_toppar&filename=stream/misc/toppar_ions_won.str

#Move these into charmm36.ff file

____________________________________________________
conda install -c conda-forge openmm parmed
conda install -c conda-forge pdbfixer

#FIX THE PDB
pdbfixer your_protein.pdb output.pdb
=>***have it name outputs with 'fixed' at end of prev name***


>>>>>>>end/pause<<<<<
Maybe or maybe not do this depending where you got the PDB files...

Use openmm [CHARMM36 TIP3p with TIP3p or Amber ff14SB with TIP3p] on pdb

Pdbfile
Pdbfixer
Modeler
_______________________


import simtk.openmm as mm
from simtk.openmm.app import *

# Load your PDB file
pdb = PDBFile('your_protein.pdb')

# Create a forcefield object, specifying AMBER or CHARMM
forcefield = ForceField('amber14-all.xml', 'amber14/tip3pfb.xml')  # Example: AMBER

# Create the OpenMM system
system = forcefield.createSystem(pdb.topology)

# ... rest of your OpenMM setup (adding hydrogens, minimization, etc.)

#Structure your files properly

data/
  hla/
    hla_a02.pdb
  tcrs/
    tcr1.pdb
    tcr2.pdb
    tcr3.pdb
    tcr4.pdb
    tcr5.pdb

______________________________________________
sudo apt-get install rlwrap

Add VMD
Download From VMD Website
Upload to Server
Extract the file
CD into VMD-1.9.4A57

 2) Edit the file 'configure'; change the values for
     the $install_library_dir and $install_bin_dir to a directory in
     which vmd data files and executables should be installed, be sure
     that you installing into a clean target directory and not overwriting
     an existing version of VMD (which would otherwise give problems):

     $install_bin_dir is the location of the startup script 'vmd'.
     It should be located in the path of users interested in running VMD.

     $install_library_dir is the location of all other VMD files.
     This included the binary and helper scripts.  It should not be
     in the path.

  3) A Makefile must be generated based on these configuration variables
     by running "./configure".

  4) After configuration is complete, cd to the src directory,
     become root or use sudo if necessary, e.g., for installation
     of VMD into /usr/local or other permission-protected system directories,
     and type "make install".  This will install VMD in the two
     directories listed above.  Note that running "make install"
     twice will print error messages because you are attempting to
     overwrite some read-only files.  Similarly, if you have incorrectly
     specified the target installation directories or attempt to overwrite
     an existing VMD installation, you will get error messages.

  5) When installed, type 'vmd' to start (make sure the
     $install_bin_dir directory is in your path).

cd into bin
nano into vmd.sh
copy paste this at the top
'
# Set the VMD installation directory (adjust this path to your actual VMD path)
export VMDINSTALLDIR=/path/to/vmd-1.9.4a57
export VMD_LIBRARY_PATH=$VMDINSTALLDIR/lib
export VMD_PLUGIN_PATH=$VMDINSTALLDIR/plugins
export PATH=$PATH:$VMDINSTALLDIR/bin
'

#Learn to run parallel processing for DiffDock to speed things up
_______________________________________________

import subprocess  # Or a suitable library for running command-line tools
import os

hla_pdb = "data/hla/hla_a0201.pdb"
peptide_dir = "data/peptides/"
output_dir = "docking_results/"

for peptide_file in os.listdir(peptide_dir):
    if peptide_file.endswith(".pdb"):
        peptide_path = os.path.join(peptide_dir, peptide_file)
        output_prefix = os.path.splitext(peptide_file)[0]  # Get filename without extension
        output_path = os.path.join(output_dir, output_prefix)

        # Construct the DiffDock command (adapt to your setup)
        diffdock_command = [
            "diffdock",  # Path to your DiffDock executable
            "--receptor", hla_pdb,
            "--ligand", peptide_path,
            "--output", output_path,
            # ... other DiffDock parameters ...
        ]

        try:
            subprocess.run(diffdock_command, check=True) # Run DiffDock
            print(f"Docking completed for {peptide_file}")
        except subprocess.CalledProcessError as e:
            print(f"Error during docking for {peptide_file}: {e}")

